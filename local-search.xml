<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0624 力扣判断括号组合方式</title>
    <link href="/2023/06/24/0624-%E5%8A%9B%E6%89%A3%E5%88%A4%E6%96%AD%E6%8B%AC%E5%8F%B7%E7%BB%84%E5%90%88%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/06/24/0624-%E5%8A%9B%E6%89%A3%E5%88%A4%E6%96%AD%E6%8B%AC%E5%8F%B7%E7%BB%84%E5%90%88%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>func generateParenthesis(n int) (ans []string) {<br>    m :&#x3D; n * 2<br>    path :&#x3D; make([]byte, m)<br>    var dfs func(int, int)<br>    dfs &#x3D; func(i, open int) {<br>        if i &#x3D;&#x3D; m {<br>            ans &#x3D; append(ans, string(path))<br>            return<br>        }<br>        if open &lt; n { &#x2F;&#x2F; 可以填左括号<br>            path[i] &#x3D; ‘(‘<br>            dfs(i+1, open+1)<br>        }<br>        if i-open &lt; open { &#x2F;&#x2F; 可以填右括号<br>            path[i] &#x3D; ‘)’<br>            dfs(i+1, open)<br>        }<br>    }<br>    dfs(0, 0)<br>    return<br>}</p><p>回溯算法if收割结果集</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/23/0623%E4%BB%8A%E6%97%A5%E5%8A%9B%E6%89%A3/"/>
    <url>/2023/06/23/0623%E4%BB%8A%E6%97%A5%E5%8A%9B%E6%89%A3/</url>
    
    <content type="html"><![CDATA[<p>四数之和：func fourSum(nums []int, target int) (quadruplets [][]int) {<br>    sort.Ints(nums)<br>    n:&#x3D;len(nums)<br>    for i:&#x3D;0;i&lt;n-3&amp;&amp;nums[i]+nums[i+1]+nums[i+2]+nums[i+3]&lt;&#x3D;target;i++{<br>        if i&gt;0&amp;&amp;nums[i] &#x3D;&#x3D;nums[i-1]||nums[i]+nums[n-3]+nums[n-2]+nums[n-1]&lt;target{<br>            continue<br>        }<br>        for j:&#x3D;i+1;j&lt;n-2&amp;&amp;nums[i]+nums[j]+nums[j+1]+nums[j+2]&lt;&#x3D;target;j++{<br>            if j&gt;i+1&amp;&amp;nums[j]&#x3D;&#x3D;nums[j-1]||nums[i]+nums[j]+nums[n-2]+nums[n-1]&lt;target{<br>                continue<br>            }<br>            for left,right:&#x3D;j+1,n-1;left&lt;right;{<br>                if sum:&#x3D;nums[i]+nums[j]+nums[left]+nums[right];sum&#x3D;&#x3D;target{<br>                quadruplets &#x3D; append(quadruplets,[]int{nums[i],nums[j],nums[left],nums[right]})<br>                for left++; left&lt;right&amp;&amp;nums[left]&#x3D;&#x3D;nums[left-1];left++{<br>                }<br>                for right–;left&lt;right&amp;&amp;nums[right]&#x3D;&#x3D;nums[right+1];right–{<br>                }<br>                    }else if sum&lt;target{<br>                        left++<br>                    }else {<br>                        right–<br>                    }<br>            }<br>        }<br>    }<br>    return<br>}<br>核心思路：排序加上双循环</p><p>在确定第一个数之后，如果 nums[i]+nums[i+1]+nums[i+2]+nums[i+3]&gt;target\textit{nums}[i]+\textit{nums}[i+1]+\textit{nums}[i+2]+\textit{nums}[i+3]&gt;\textit{target}nums[i]+nums[i+1]+nums[i+2]+nums[i+3]&gt;target，说明此时剩下的三个数无论取什么值，四数之和一定大于 target\textit{target}target，因此退出第一重循环；<br>在确定第一个数之后，如果 nums[i]+nums[n−3]+nums[n−2]+nums[n−1]&lt;target\textit{nums}[i]+\textit{nums}[n-3]+\textit{nums}[n-2]+\textit{nums}[n-1]&lt;\textit{target}nums[i]+nums[n−3]+nums[n−2]+nums[n−1]&lt;target，说明此时剩下的三个数无论取什么值，四数之和一定小于 target\textit{target}target，因此第一重循环直接进入下一轮，枚举 nums[i+1]\textit{nums}[i+1]nums[i+1]；<br>在确定前两个数之后，如果 nums[i]+nums[j]+nums[j+1]+nums[j+2]&gt;target\textit{nums}[i]+\textit{nums}[j]+\textit{nums}[j+1]+\textit{nums}[j+2]&gt;\textit{target}nums[i]+nums[j]+nums[j+1]+nums[j+2]&gt;target，说明此时剩下的两个数无论取什么值，四数之和一定大于 target\textit{target}target，因此退出第二重循环；<br>在确定前两个数之后，如果 nums[i]+nums[j]+nums[n−2]+nums[n−1]&lt;target\textit{nums}[i]+\textit{nums}[j]+\textit{nums}[n-2]+\textit{nums}[n-1]&lt;\textit{target}nums[i]+nums[j]+nums[n−2]+nums[n−1]&lt;target，说明此时剩下的两个数无论取什么值，四数之和一定小于 target\textit{target}target，因此第二重循环直接进入下一轮，枚举 nums[j+1]\textit{nums}[j+1]nums[j+1]。</p><p>每一种循环枚举到的下标必须大于上一重循环枚举到的下标；</p><p>同一重循环中，如果当前元素与上一个元素相同，则跳过当前元素。</p><p>如果和等于 target\textit{target}target，则将枚举到的四个数加到答案中，然后将左指针右移直到遇到不同的数，将右指针左移直到遇到不同的数；</p><p>如果和小于 target\textit{target}target，则将左指针右移一位；</p><p>如果和大于 target\textit{target}target，则将右指针左移一位。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/22/0618/"/>
    <url>/2023/06/22/0618/</url>
    
    <content type="html"><![CDATA[<p>go 去首尾 s&#x3D;s.TremSpace()<br>处理符号位 定位1 或者-1 用乘法赋予前缀<br>字符串转换整数<br>abs：&#x3D;0<br>abs：&#x3D;abs<em>10+int（</em>**）<br>每次循环乘以10拿到value</p><p>公共子字符串前缀<br>逐个比较，抓取每个字符串的最大公共字串长度做对比<br>纵向比对，</p><p>github 密码 ：zhuzheng359</p><p>分布式技术<br>消息队列<br>多进程<br>后端开发</p><p>npm ls –depth 0</p><p>npm install acorn –save</p><p>编译过程留存<br>go build helloworld.go</p><p><a href="mailto:&#55;&#55;&#x34;&#x31;&#56;&#x38;&#57;&#x34;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#55;&#55;&#x34;&#x31;&#56;&#x38;&#57;&#x34;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a><br>zhuzheng359</p><p>input :&#x3D; bufio.NewScanner(os.Stdio)<br>input.Text()</p><p>%d int变量<br>%x, %o, %b 分别为16进制，8进制，2进制形式的int<br>%f, %g, %e 浮点数： 3.141593 3.141592653589793 3.141593e+00<br>%t 布尔变量：true 或 false<br>%c rune (Unicode码点)，Go语言里特有的Unicode字符类型<br>%s string<br>%q 带双引号的字符串 “abc” 或 带单引号的 rune ‘c’<br>%v 会将任意变量以易读的形式打印出来<br>%T 打印变量的类型<br>%% 字符型百分比标志（%符号本身，没有其他操作）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/22/0619%20/"/>
    <url>/2023/06/22/0619%20/</url>
    
    <content type="html"><![CDATA[<p>力扣三数之和<br>思路：数组排序加上双指针</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/22/0622/"/>
    <url>/2023/06/22/0622/</url>
    
    <content type="html"><![CDATA[<p>最接近的三数之和：<br>func threeSumClosest(nums []int, target int) int {<br>    sort.Ints(nums)<br>    res :&#x3D; nums[0] + nums[1] + nums[2]</p><pre><code class="hljs">for i := 0; i &lt; len(nums)-2; i++ &#123;    n1 := nums[i]    l, r := i+1, len(nums)-1    for l &lt; r &#123;        n2, n3 := nums[l], nums[r]        sum := n1 + n2 + n3        if sum &gt; target &#123;            r--        &#125; else &#123;            l++        &#125;        if abs(sum-target) &lt; abs(res-target) &#123;            res = sum（关键思路）        &#125;    &#125;&#125;return res</code></pre><p>}<br>func abs(a int) int {<br>    if a &lt; 0 {<br>        return -a<br>    }<br>    return a<br>}<br>分 sum-target&gt;0 和&lt;0两种情况<br>核心思路在于一直更新比较的结果，选最小的值作为最终的结果</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/06/22/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/06/22/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2023/06/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/06/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/21/hello-world/"/>
    <url>/2023/06/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>0619每日学习心得</title>
    <link href="/2023/06/20/0619%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <url>/2023/06/20/0619%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
