<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0705力扣算法经典题</title>
    <link href="/2023/07/05/0705%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95%E7%BB%8F%E5%85%B8%E9%A2%98/"/>
    <url>/2023/07/05/0705%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95%E7%BB%8F%E5%85%B8%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ol start="2750"><li>将数组划分成若干好子数组的方式<br>提示<br>中等<br>6<br>相关企业<br>给你一个二元数组 nums 。</li></ol><p>如果数组中的某个子数组 恰好 只存在 一 个值为 1 的元素，则认为该子数组是一个 好子数组 。</p><p>请你统计将数组 nums 划分成若干 好子数组 的方法数，并以整数形式返回。由于数字可能很大，返回其对 109 + 7 取余 之后的结果。</p><p>子数组是数组中的一个连续 非空 元素序列。</p><p>示例 1：</p><p>输入：nums &#x3D; [0,1,0,0,1]<br>输出：3<br>解释：存在 3 种可以将 nums 划分成若干好子数组的方式：</p><ul><li>[0,1] [0,0,1]</li><li>[0,1,0] [0,1]</li><li>[0,1,0,0] [1]</li></ul><p>func numberOfGoodSubarraySplits(nums []int) int {<br>    var dp []int<br>    var mp []int<br>    mod :&#x3D;int(1e9+7)<br>    for i:&#x3D;0;i&lt;len(nums);i++{<br>        if nums[i]&#x3D;&#x3D;1{<br>            dp&#x3D;append(dp,i)<br>        }<br>    }<br>     if len(dp)&#x3D;&#x3D;1{<br>            return 1<br>            }else if len(dp)&#x3D;&#x3D;2{<br>                return dp[1]-dp[0]<br>            }else if len(dp)&#x3D;&#x3D;0{<br>                return 0<br>            }<br>    fmt.Println(dp)<br>    for j:&#x3D;0;j&lt;len(dp)-1;j++{<br>        mp&#x3D;append(mp,dp[j+1]-dp[j])<br>    }<br>    a:&#x3D;mp[0]<br>    for k:&#x3D;1;k&lt;len(mp);k++{<br>        a&#x3D;a*mp[k]%mod<br>    }<br>    return a<br>}</p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣新算法</title>
    <link href="/2023/07/04/%E5%8A%9B%E6%89%A3%E6%96%B0%E7%AE%97%E6%B3%95/"/>
    <url>/2023/07/04/%E5%8A%9B%E6%89%A3%E6%96%B0%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>0702力扣解数独</title>
    <link href="/2023/07/02/0702%E5%8A%9B%E6%89%A3%E8%A7%A3%E6%95%B0%E7%8B%AC/"/>
    <url>/2023/07/02/0702%E5%8A%9B%E6%89%A3%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<p>请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。</p><p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）</p><p>注意：</p><p>一个有效的数独（部分已被填充）不一定是可解的。<br>只需要根据以上规则，验证已经填入的数字是否有效即可。<br>空白格用 ‘.’ 表示。</p><p>func isValidSudoku(board [][]byte) bool {<br>    var rows, columns [9][9]int<br>    var subboxes [3][3][9]int<br>    for i, row :&#x3D; range board {<br>        for j, c :&#x3D; range row {<br>            if c &#x3D;&#x3D; ‘.’ {<br>                continue<br>            }<br>            index :&#x3D; c - ‘1’<br>            rows[i][index]++<br>            columns[j][index]++<br>            subboxes[i&#x2F;3][j&#x2F;3][index]++<br>            if rows[i][index] &gt; 1 || columns[j][index] &gt; 1 || subboxes[i&#x2F;3][j&#x2F;3][index] &gt; 1 {<br>                return false<br>            }<br>        }<br>    }<br>    return true<br>}</p><p>核心思路在于怎么存储1到9的数值，其中value-‘1’是用来表示int类型数值的方式</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>629</title>
    <link href="/2023/06/29/0629/"/>
    <url>/2023/06/29/0629/</url>
    
    <content type="html"><![CDATA[<p>相关企业<br>整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。</p><p>例如，arr &#x3D; [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。<br>整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p><p>例如，arr &#x3D; [1,2,3] 的下一个排列是 [1,3,2] 。<br>类似地，arr &#x3D; [2,3,1] 的下一个排列是 [3,1,2] 。<br>而 arr &#x3D; [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。<br>给你一个整数数组 nums ，找出 nums 的下一个排列。</p><p>必须 原地 修改，只允许使用额外常数空间。</p><p>示例 1：</p><p>输入：nums &#x3D; [1,2,3]<br>输出：[1,3,2]<br>示例 2：</p><p>输入：nums &#x3D; [3,2,1]<br>输出：[1,2,3]</p><p>func nextPermutation(nums []int)  {<br>    n:&#x3D;len(nums)<br>    count:&#x3D;0<br>    for i:&#x3D;n-1;i&gt;0;i–{<br>        if nums[i]&gt;nums[i-1]{<br>            t:&#x3D;nums[i]<br>            nums[i]&#x3D;nums[i-1]<br>            nums[i-1]&#x3D;t<br>            count++<br>            break<br>        }<br>    }<br>    if count&#x3D;&#x3D;0{<br>        for j:&#x3D;0;j&lt;n&#x2F;2;j++{<br>            h:&#x3D;nums[n-j-1]<br>            nums[n-j-1]&#x3D;nums[j]<br>            nums[j]&#x3D;h<br>        }<br>    }</p><p>}</p><p>找出最小的增幅，然后做逆置处理</p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0627 力扣算法两数相除</title>
    <link href="/2023/06/27/0627-%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/"/>
    <url>/2023/06/27/0627-%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<ol start="29"><li>两数相除<br>中等<br>1.1K<br>相关企业<br>给你两个整数，被除数 dividend 和除数 divisor。将两数相除，要求 不使用 乘法、除法和取余运算。</li></ol><p>整数除法应该向零截断，也就是截去（truncate）其小数部分。例如，8.345 将被截断为 8 ，-2.7335 将被截断至 -2 。</p><p>返回被除数 dividend 除以除数 divisor 得到的 商 。</p><p>注意：假设我们的环境只能存储 32 位 有符号整数，其数值范围是 [−231,  231 − 1] 。本题中，如果商 严格大于 231 − 1 ，则返回 231 − 1 ；如果商 严格小于 -231 ，则返回 -231 。</p><p>func divide(dividend int, divisor int) int {<br>        count:&#x3D;0<br>        fu:&#x3D;1<br>        if dividend&lt;0{<br>            fu&#x3D;-fu<br>            dividend&#x3D;dividend<em>fu<br>        }<br>        if divisor&lt;0{<br>            if fu&lt;0{<br>                divisor&#x3D;divisor*fu<br>                fu&#x3D;-fu<br>            }else{<br>                fu&#x3D;-fu<br>                divisor&#x3D;divisor*fu<br>            }<br>        }<br>        for dividend&gt;&#x3D;divisor{<br>            dividend&#x3D;dividend-divisor<br>            count++<br>        }<br>        return count</em>fu<br>}</p><p>这道题需要判断符号位，我们先设置符号位通过判断正负得到最终正确的结果，使用连续减法的思路来找到count的值从而判断结果</p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0623 力扣查找单例字符串</title>
    <link href="/2023/06/26/0623-%E5%8A%9B%E6%89%A3%E6%9F%A5%E6%89%BE%E5%8D%95%E4%BE%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/06/26/0623-%E5%8A%9B%E6%89%A3%E6%9F%A5%E6%89%BE%E5%8D%95%E4%BE%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。</p><p>示例 1：</p><p>输入：haystack &#x3D; “sadbutsad”, needle &#x3D; “sad”<br>输出：0<br>解释：”sad” 在下标 0 和 6 处匹配。<br>第一个匹配项的下标是 0 ，所以返回 0 。<br>示例 2：</p><p>输入：haystack &#x3D; “leetcode”, needle &#x3D; “leeto”<br>输出：-1<br>解释：”leeto” 没有在 “leetcode” 中出现，所以返回 -1 。</p><p>func strStr(haystack string, needle string) int {<br>    m:&#x3D;len(haystack)<br>    n:&#x3D;len(needle)<br>    h:&#x3D;-1<br>    for i:&#x3D;0;i&lt;&#x3D;m-n;i++{<br>        if haystack[i:i+n]&#x3D;&#x3D;needle{<br>            h&#x3D;i<br>            break<br>        }<br>    }</p><pre><code class="hljs">return h</code></pre><p>}</p><p>暴力解法：找出从1到n的所有连续M的字串进行匹配，找出适合的匹配项并break</p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0624 力扣判断括号组合方式</title>
    <link href="/2023/06/24/0624-%E5%8A%9B%E6%89%A3%E5%88%A4%E6%96%AD%E6%8B%AC%E5%8F%B7%E7%BB%84%E5%90%88%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/06/24/0624-%E5%8A%9B%E6%89%A3%E5%88%A4%E6%96%AD%E6%8B%AC%E5%8F%B7%E7%BB%84%E5%90%88%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>func generateParenthesis(n int) (ans []string) {<br>    m :&#x3D; n * 2<br>    path :&#x3D; make([]byte, m)<br>    var dfs func(int, int)<br>    dfs &#x3D; func(i, open int) {<br>        if i &#x3D;&#x3D; m {<br>            ans &#x3D; append(ans, string(path))<br>            return<br>        }<br>        if open &lt; n { &#x2F;&#x2F; 可以填左括号<br>            path[i] &#x3D; ‘(‘<br>            dfs(i+1, open+1)<br>        }<br>        if i-open &lt; open { &#x2F;&#x2F; 可以填右括号<br>            path[i] &#x3D; ‘)’<br>            dfs(i+1, open)<br>        }<br>    }<br>    dfs(0, 0)<br>    return<br>}</p><p>回溯算法if收割结果集</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/23/0623%E4%BB%8A%E6%97%A5%E5%8A%9B%E6%89%A3/"/>
    <url>/2023/06/23/0623%E4%BB%8A%E6%97%A5%E5%8A%9B%E6%89%A3/</url>
    
    <content type="html"><![CDATA[<p>四数之和：func fourSum(nums []int, target int) (quadruplets [][]int) {<br>    sort.Ints(nums)<br>    n:&#x3D;len(nums)<br>    for i:&#x3D;0;i&lt;n-3&amp;&amp;nums[i]+nums[i+1]+nums[i+2]+nums[i+3]&lt;&#x3D;target;i++{<br>        if i&gt;0&amp;&amp;nums[i] &#x3D;&#x3D;nums[i-1]||nums[i]+nums[n-3]+nums[n-2]+nums[n-1]&lt;target{<br>            continue<br>        }<br>        for j:&#x3D;i+1;j&lt;n-2&amp;&amp;nums[i]+nums[j]+nums[j+1]+nums[j+2]&lt;&#x3D;target;j++{<br>            if j&gt;i+1&amp;&amp;nums[j]&#x3D;&#x3D;nums[j-1]||nums[i]+nums[j]+nums[n-2]+nums[n-1]&lt;target{<br>                continue<br>            }<br>            for left,right:&#x3D;j+1,n-1;left&lt;right;{<br>                if sum:&#x3D;nums[i]+nums[j]+nums[left]+nums[right];sum&#x3D;&#x3D;target{<br>                quadruplets &#x3D; append(quadruplets,[]int{nums[i],nums[j],nums[left],nums[right]})<br>                for left++; left&lt;right&amp;&amp;nums[left]&#x3D;&#x3D;nums[left-1];left++{<br>                }<br>                for right–;left&lt;right&amp;&amp;nums[right]&#x3D;&#x3D;nums[right+1];right–{<br>                }<br>                    }else if sum&lt;target{<br>                        left++<br>                    }else {<br>                        right–<br>                    }<br>            }<br>        }<br>    }<br>    return<br>}<br>核心思路：排序加上双循环</p><p>在确定第一个数之后，如果 nums[i]+nums[i+1]+nums[i+2]+nums[i+3]&gt;target\textit{nums}[i]+\textit{nums}[i+1]+\textit{nums}[i+2]+\textit{nums}[i+3]&gt;\textit{target}nums[i]+nums[i+1]+nums[i+2]+nums[i+3]&gt;target，说明此时剩下的三个数无论取什么值，四数之和一定大于 target\textit{target}target，因此退出第一重循环；<br>在确定第一个数之后，如果 nums[i]+nums[n−3]+nums[n−2]+nums[n−1]&lt;target\textit{nums}[i]+\textit{nums}[n-3]+\textit{nums}[n-2]+\textit{nums}[n-1]&lt;\textit{target}nums[i]+nums[n−3]+nums[n−2]+nums[n−1]&lt;target，说明此时剩下的三个数无论取什么值，四数之和一定小于 target\textit{target}target，因此第一重循环直接进入下一轮，枚举 nums[i+1]\textit{nums}[i+1]nums[i+1]；<br>在确定前两个数之后，如果 nums[i]+nums[j]+nums[j+1]+nums[j+2]&gt;target\textit{nums}[i]+\textit{nums}[j]+\textit{nums}[j+1]+\textit{nums}[j+2]&gt;\textit{target}nums[i]+nums[j]+nums[j+1]+nums[j+2]&gt;target，说明此时剩下的两个数无论取什么值，四数之和一定大于 target\textit{target}target，因此退出第二重循环；<br>在确定前两个数之后，如果 nums[i]+nums[j]+nums[n−2]+nums[n−1]&lt;target\textit{nums}[i]+\textit{nums}[j]+\textit{nums}[n-2]+\textit{nums}[n-1]&lt;\textit{target}nums[i]+nums[j]+nums[n−2]+nums[n−1]&lt;target，说明此时剩下的两个数无论取什么值，四数之和一定小于 target\textit{target}target，因此第二重循环直接进入下一轮，枚举 nums[j+1]\textit{nums}[j+1]nums[j+1]。</p><p>每一种循环枚举到的下标必须大于上一重循环枚举到的下标；</p><p>同一重循环中，如果当前元素与上一个元素相同，则跳过当前元素。</p><p>如果和等于 target\textit{target}target，则将枚举到的四个数加到答案中，然后将左指针右移直到遇到不同的数，将右指针左移直到遇到不同的数；</p><p>如果和小于 target\textit{target}target，则将左指针右移一位；</p><p>如果和大于 target\textit{target}target，则将右指针左移一位。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/22/0618/"/>
    <url>/2023/06/22/0618/</url>
    
    <content type="html"><![CDATA[<p>go 去首尾 s&#x3D;s.TremSpace()<br>处理符号位 定位1 或者-1 用乘法赋予前缀<br>字符串转换整数<br>abs：&#x3D;0<br>abs：&#x3D;abs<em>10+int（</em>**）<br>每次循环乘以10拿到value</p><p>公共子字符串前缀<br>逐个比较，抓取每个字符串的最大公共字串长度做对比<br>纵向比对，</p><p>github 密码 ：zhuzheng359</p><p>分布式技术<br>消息队列<br>多进程<br>后端开发</p><p>npm ls –depth 0</p><p>npm install acorn –save</p><p>编译过程留存<br>go build helloworld.go</p><p><a href="mailto:&#x37;&#55;&#52;&#49;&#x38;&#56;&#x39;&#52;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#x6d;">&#x37;&#55;&#52;&#49;&#x38;&#56;&#x39;&#52;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#x6d;</a><br>zhuzheng359</p><p>input :&#x3D; bufio.NewScanner(os.Stdio)<br>input.Text()</p><p>%d int变量<br>%x, %o, %b 分别为16进制，8进制，2进制形式的int<br>%f, %g, %e 浮点数： 3.141593 3.141592653589793 3.141593e+00<br>%t 布尔变量：true 或 false<br>%c rune (Unicode码点)，Go语言里特有的Unicode字符类型<br>%s string<br>%q 带双引号的字符串 “abc” 或 带单引号的 rune ‘c’<br>%v 会将任意变量以易读的形式打印出来<br>%T 打印变量的类型<br>%% 字符型百分比标志（%符号本身，没有其他操作）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/22/0619%20/"/>
    <url>/2023/06/22/0619%20/</url>
    
    <content type="html"><![CDATA[<p>力扣三数之和<br>思路：数组排序加上双指针</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/22/0622/"/>
    <url>/2023/06/22/0622/</url>
    
    <content type="html"><![CDATA[<p>最接近的三数之和：<br>func threeSumClosest(nums []int, target int) int {<br>    sort.Ints(nums)<br>    res :&#x3D; nums[0] + nums[1] + nums[2]</p><pre><code class="hljs">for i := 0; i &lt; len(nums)-2; i++ &#123;    n1 := nums[i]    l, r := i+1, len(nums)-1    for l &lt; r &#123;        n2, n3 := nums[l], nums[r]        sum := n1 + n2 + n3        if sum &gt; target &#123;            r--        &#125; else &#123;            l++        &#125;        if abs(sum-target) &lt; abs(res-target) &#123;            res = sum（关键思路）        &#125;    &#125;&#125;return res</code></pre><p>}<br>func abs(a int) int {<br>    if a &lt; 0 {<br>        return -a<br>    }<br>    return a<br>}<br>分 sum-target&gt;0 和&lt;0两种情况<br>核心思路在于一直更新比较的结果，选最小的值作为最终的结果</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/06/22/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/06/22/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2023/06/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/06/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/21/hello-world/"/>
    <url>/2023/06/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>0619每日学习心得</title>
    <link href="/2023/06/20/0619%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <url>/2023/06/20/0619%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
